/****
Copyright (c) 2015 The Jackson Laboratory

This is free software: you can redistribute it and/or modify it 
under the terms of the GNU General Public License as published by  
the Free Software Foundation, either version 3 of the License, or  
(at your option) any later version.
 
This software is distributed in the hope that it will be useful,  
but WITHOUT ANY WARRANTY; without even the implied warranty of 
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU 
General Public License for more details.

You should have received a copy of the GNU General Public License 
along with this software.  If not, see <http://www.gnu.org/licenses/>.
****/

package org.jax.cs.jcmsWebInstaller;

import java.awt.Cursor;
import java.awt.Toolkit;
import java.awt.event.MouseEvent;
import java.io.File;
import java.sql.SQLException;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.NoSuchElementException;
import javax.swing.JDesktopPane;
import javax.swing.JFrame;

/**
 *
 * @author cnh
 */
public class InstallingJCMSWebPanel extends JCMSPanel {
    private Connector connector = null;
    private LogIt logIt = new LogIt();
    private String MySQLWinExecutableName = "mysql.exe";
    private String MySQLWinDumpExecutableName = "mysqldump.exe";
    private String MySQLOtherExecutableName = "mysql";
    private String MySQLOtherDumpExecutableName = "mysqldump";
    private String docsPath = File.separator + "Docs" + File.separator;
    private Boolean migrateJCMSWeb = Boolean.FALSE;
    private PropertiesDTO propertiesDTO = new PropertiesDTO();
    private Boolean successfulJCMSWebInstall = false;
    
    /**
     * Creates new form InstallingJCMSWebPanel
     */
    public InstallingJCMSWebPanel(JDesktopPane desktopPane, JFrame frame) {
        super.JCMSPanel(desktopPane, frame);
        initComponents();
        
        this.hidInstallButton.setVisible(false);
        this.backButton.setEnabled(false);
        this.nextButton.setEnabled(false);
    }
    
    public void initialize() {
        System.out.println("Child panel initialize method");
        String strAction = (((JCMSWebInstallerApp)this.getFrame()).getIsNewInstallation() ? "Installing" : "Upgrading" );
        this.connector = ((JCMSWebInstallerApp)this.getFrame()).getConnector();
        
        // Trigger installation script here
        // Posting event so panel has a chance to display first
        MouseEvent event = new MouseEvent(this.hidInstallButton, MouseEvent.MOUSE_CLICKED, (long)1, MouseEvent.MOUSE_CLICKED, this.hidInstallButton.getX(), this.hidInstallButton.getY(), 1, false, MouseEvent.NOBUTTON);
        Toolkit.getDefaultToolkit().getSystemEventQueue().postEvent(event);

        this.txtMessage.setText("======================================================"
                            + "\n     "+ strAction +" JCMS Web ...   "
                            + "\n     Please wait for the installation to complete."
                            + "\n     This may take a few minutes."
                            + "\n======================================================");
        this.lblTitle.setText(strAction + " JCMS Web");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        txtMessage = new javax.swing.JTextArea();
        nextButton = new javax.swing.JButton();
        backButton = new javax.swing.JButton();
        lblTitle = new javax.swing.JLabel();
        progressBar = new javax.swing.JProgressBar();
        hidInstallButton = new javax.swing.JButton();

        txtMessage.setEditable(false);
        txtMessage.setColumns(20);
        txtMessage.setFont(new java.awt.Font("Monospaced", 0, 14)); // NOI18N
        txtMessage.setLineWrap(true);
        txtMessage.setRows(5);
        txtMessage.setTabSize(5);
        txtMessage.setText("\t\n[Show installation activity.  \n Migrate jcmsweb_db to jcms_db.\n Create jcms user accounts and grant access.  \n SHUTDOWN JBOSS!!!!!\n Rename current JBOSS installation.\n Install new JBOSS installation.\n Progress bar below.]\n");
        txtMessage.setWrapStyleWord(true);
        txtMessage.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtMessageFocusGained(evt);
            }
        });
        jScrollPane1.setViewportView(txtMessage);

        nextButton.setText("Next");
        nextButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextButtonNextActionPerformed(evt);
            }
        });

        backButton.setText("Back");
        backButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backButtonNextActionPerformed(evt);
            }
        });

        lblTitle.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        lblTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblTitle.setText("Installing JCMS Web");
        lblTitle.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        hidInstallButton.setText("hidden");
        hidInstallButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                hidInstallButtonMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(48, 48, 48)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lblTitle, javax.swing.GroupLayout.DEFAULT_SIZE, 509, Short.MAX_VALUE)
                    .addComponent(jScrollPane1)
                    .addComponent(progressBar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(backButton)
                        .addGap(147, 147, 147)
                        .addComponent(hidInstallButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(nextButton)))
                .addGap(48, 48, 48))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(lblTitle)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 337, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(progressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 27, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(nextButton)
                            .addComponent(backButton))
                        .addGap(19, 19, 19))
                    .addComponent(hidInstallButton, javax.swing.GroupLayout.Alignment.TRAILING)))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void nextButtonNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextButtonNextActionPerformed
        if (this.successfulJCMSWebInstall)
            this.nextPanel(this, this.getJcmsView().getInstallationCompletePanel(), this.getJcmsView());
        else
            this.nextPanel(this, this.getJcmsView().getInstallationFailedPanel(), this.getJcmsView());
    }//GEN-LAST:event_nextButtonNextActionPerformed

    private void backButtonNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backButtonNextActionPerformed
        // database backups restored - clear references
        connector.clearDatabaseBackups();
        this.previousPanel(this, this.getJcmsView());
    }//GEN-LAST:event_backButtonNextActionPerformed

    private void txtMessageFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtMessageFocusGained
        
    }//GEN-LAST:event_txtMessageFocusGained

    private void hidInstallButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_hidInstallButtonMouseClicked
        this.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
        if (install()) {
            this.nextButton.setEnabled(true);
        }
        this.nextButton.setEnabled(true);
        this.backButton.setEnabled(true);
        this.setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));

    }//GEN-LAST:event_hidInstallButtonMouseClicked

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backButton;
    private javax.swing.JButton hidInstallButton;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JButton nextButton;
    private javax.swing.JProgressBar progressBar;
    private javax.swing.JTextArea txtMessage;
    // End of variables declaration//GEN-END:variables


    private Boolean install() {
        Boolean blnContinue = true;
        ResultDTO dto = null;
        String msg = "";
        Utils util = new Utils();
        DeployJCMSWeb deployJCMSWeb = new DeployJCMSWeb();

        if (blnContinue) {
            msg = logIt.logMessage(Severity.INFO, connector.getMySQLVersion());

            dto = connector.getMySQLLowerCase();
            msg += logIt.logMessage(dto.getSeverity(), dto.getStrMessage());
            blnContinue = dto.getBlnSuccess();
        }
        if (blnContinue) {
            dto = connector.validateJCMSSystemUser();
            msg += logIt.logMessage(dto.getSeverity(), dto.getStrMessage());
            blnContinue = dto.getBlnSuccess();
        }
        
        this.txtMessage.append(msg);
        msg = "";
        String installDirectory = this.getInputDTO().getWebInstallationDirectory().trim();
        msg += "JCMS Web Installation Directory: " + installDirectory + "\n";
        
        try {
            if (this.getIsNewInstallation()) {
                installJCMSWeb(); 
            }
            else {
                this.backupDatabases(installDirectory);
                upgradeJCMSWeb();
            }
            msg += deployJCMSWeb.backupJCMSWeb(installDirectory);
            msg += deployJCMSWeb.deleteMySQLConnectors(installDirectory);
            msg += deployJCMSWeb.deploy(installDirectory);
            msg += deployJCMSWeb.updateDataSourceFile(installDirectory, util.buildMySQLConnectionURL(this.getInputDTO().getMySQLServerName(), this.getInputDTO().getMySQLPort(), this.getInputDTO().getDatabaseName()));
            
            String successMessage = "";
            if (this.getIsNewInstallation()) {
                successMessage = "\n JCMS Web successfully installed. ";
            } else {
                successMessage = "\n JCMS Web successfully upgraded. ";
            }
            msg += logIt.logMessage(Severity.SUCCESS, successMessage);
            this.successfulJCMSWebInstall = true;
        } catch (JCMSException jcmse) {
            if (this.getIsNewInstallation()) {
                try {
                    connector.dropDatabase(this.getInputDTO().getDatabaseName());
                } catch (JCMSException e) {
                }
            } else {
                try {
                    msg += connector.rollbackDatabases();
                    msg += logIt.logMessage(Severity.ERROR, "\nJCMS database upgrade failed!");
                    msg += logIt.logMessage(Severity.INFO, "\nDatabase restored to its original state.");
                } catch (JCMSException e) {
                    
                }
            }
            try {
                deployJCMSWeb.rollbackJCMSWeb(installDirectory);
                msg += "JCMS Web returned to its original state, "+ installDirectory;
            } catch (JCMSException e) {
                
            }
            
            msg += jcmse.getMessage();
            
            if (jcmse.getMessage().contains("ERROR")) {
                String help = "\n\nUnfortunately, JCMS Web Installer ran into a problem.  "
                        + "Please review this log for hints on how to resolve the issue now.  "
                        + "If not successful, there is the option to submit a JCMS Web forum request.  "
                        + "Include a copy of these installation notes with your request."
                        + "\n\nThere is a chance our technical support will also need a copy of your log files to help you out.  "
                        + "Please save the log files in a safe place."
                        + "\nLogs are here "+ new Utils().getInstallerDirectory()+ "  "
                        + "\n\nHere are the forum links to get you started.  "
                        + "\nCommunity Forums:  " + propertiesDTO.getJCMSCommunityForumsURL()
                        + "\nJCMS Web Forum:  " + propertiesDTO.getJCMSWebForumURL()
                        + "\n\nAdditional resources on the last screen called JCMS Resources.\n"
                        + "";
                msg += logIt.logMessage(Severity.ERROR, "\nJCMS Web installation failed.  " + help +"\nJCMS Web installation failed.  ");
            } 
            
            blnContinue = false;
        } finally {
            connector.disconnect();
        }
        
        this.txtMessage.append(msg);
        logIt.logToFile();
        
        return blnContinue;
    }
    
    private void refreshPanel() {
        this.getFrame().repaint();
        this.getFrame().validate();
    }
    
    private void installJCMSWeb() throws JCMSException{
        ResultDTO dto = null;
        String obsoleteJCMSWebDBName = ((JCMSWebInstallerApp)this.getFrame()).getArg1ObsoleteJCMSWebDbName();
        int rows = 0;
        
        String msg = logIt.logMessage(Severity.INFO, "\nBeginning JCMS Web installation in directory "
                + this.getInputDTO().getWebInstallationDirectory() +" with associated database "
                + this.getInputDTO().getDatabaseName()) ;
        this.txtMessage.append(msg);
        
        try {
            if ((!this.getIsNewInstallation()) && connector.findDatabase(obsoleteJCMSWebDBName)) {
                msg = logIt.logMessage(Severity.ERROR, "\nFound JCMS Web database, "+ obsoleteJCMSWebDBName 
                    + ", indicating this may not be a new installation.  "
                    + "\nPlease remove this database and restart this installation or upgrade JCMS Web instead.");
                this.txtMessage.append(msg);
                throw new JCMSException(msg);
            }
        } catch (SQLException sqle) {
            throw new JCMSException(sqle.getMessage());
        }
        
        // Create database
        try {
            System.out.println("Creating database schema "+ this.getInputDTO().getDatabaseName());
            rows = connector.executeUpdate("CREATE SCHEMA "+ this.getInputDTO().getDatabaseName());
            System.out.println("Created database schema "+ this.getInputDTO().getDatabaseName());
            this.txtMessage.append("\nCreate schema return code " + rows);
        } catch (SQLException e) {
            msg = logIt.logMessage(Severity.ERROR, "\nDatabase creation failed.  JCMS Web installation cancelled. \nException detail: \n" +e.getMessage());
            throw new JCMSException(msg);
        } 
        
        String jcmsReleaseNum = "";
        try {
            // Create baseline JCMS DB tables
            connector.runMySQLFile(this.getInputDTO().getDatabaseName(), "jcms_db.sql");
            this.upgradeJCMSWeb();
        } catch (NumberFormatException nfe) {
            msg = logIt.logMessage(Severity.ERROR, "\nInstallation failed to convert JCMS Access release number, \n" + jcmsReleaseNum +".");
            this.txtMessage.append(msg);
            throw new JCMSException(msg);
        } catch (Exception e) {
            this.txtMessage.append(e.getMessage());
            throw new JCMSException(e.getMessage());
        } 
        
    }
    
    private void upgradeJCMSWeb() throws JCMSException {
        PropertiesDTO propertiesDTO = new PropertiesDTO();
        ProgramVariables programVariables = new ProgramVariables();
        String msg = "";
        String obsoleteJCMSWebDBName = ((JCMSWebInstallerApp)this.getFrame()).getArg1ObsoleteJCMSWebDbName();
        
        try {
            // Make sure all database tables are INNODB
            connector.forceINNODBEngine(this.getInputDTO().getDatabaseName());
            
            // Upgrade jcms database using pre JCMS Web convention releaseNum first
            String version = connector.getReleaseNum();
            msg = logIt.logMessage(Severity.INFO, "Selected version is: "+ version +".");
            int removeNum =  0;
            HashMap<String, Integer> map = programVariables.getUpgradeMap();
            
            // Irrelevant of version recreate procedure to find and drop constraint by name
            // Fixed a mysql backup bug where it didn't backup procedures.  
            // It is possible that any version could not have this procedure 
            // which is used by many upgrade scripts to properly find constraints.
            connector.runMySQLFile(this.getInputDTO().getDatabaseName(), "dropConstraintWithoutName.sql");
            
            if (map.containsKey(version)) {
                removeNum = map.get(version);
            } else {
                // no match, do not run any upgrade scripts
                // remove them all
                removeNum = programVariables.getUpgradeScripts().size();
            }
            
            // After while loop, will contain all upgrade scripts that need to be run
            LinkedList<String> upgradesToRun = programVariables.getUpgradeScripts();

            try {
                while (removeNum != 0) {
                    upgradesToRun.removeFirst();
                    removeNum--;
                } 
            } catch (NoSuchElementException nsee) {
                msg += logIt.logMessage(Severity.ERROR, "Exception: Could not determine upgrade path.");
                throw new JCMSException(logIt.logMessage(Severity.ERROR, "\nException: Could not determine upgrade path."
                    + "\nException detail: \n"+ nsee.getMessage() ));
            }
            
            // Apply all upgrade scripts by dbInfo.releaseNum field first.
            // ReleaseNum is no longer used when dbVers equals 102
            for (String fileName : upgradesToRun) {
                if (fileName.equalsIgnoreCase("j4.1.0-j4.2.0.mysql.sql")) {
                    connector.removeGenotypeDocumentIndex();
                } 
                
                // This is the logical path
                msg += logIt.logMessage(Severity.INFO, "Running database script:  "+ fileName);
                connector.runMySQLFile(this.getInputDTO().getDatabaseName(), fileName);
            }
            
            // Consolidates User Account information and Query Definitions to JCMS DB
            if ((!this.getIsNewInstallation()) && connector.findDatabase(obsoleteJCMSWebDBName)) {
                msg += logIt.logMessage(Severity.INFO, "Running upgrade script: Migrating user account data");
                connector.migrateJCMSWebDB(obsoleteJCMSWebDBName);
            }

            // If no user accounts create the default set.  This can happen when 
            // a user decides to upgrade jcms_db without pointing to a JCMS Web db
            // or is just installing JCMS Web with an existing JCMS Access application.
            if (!connector.hasCenter()) 
                // Idempotent code, makes sure owners exist as workgroups and
                // mtsadmin belongs to all workgroups
                msg += connector.setupJCMSWebAccounts();
                
            // Ensure mtsadmin is a member of all functional areas/workgroup
            try {
                connector.grantMtsAdminFullAccess();
            } catch (JCMSException e) {
            }
            
            try{
                msg += logIt.logMessage(Severity.INFO, "Creating histogram datatable refresh event.");
                connector.runMySQLFile(this.getInputDTO().getDatabaseName(), "histogramRefreshEvent.sql");
            }
            catch(Exception e){
                msg += logIt.logMessage(Severity.WARN, "Error: " + e);
                msg += logIt.logMessage(Severity.WARN, "Scheduled JCMS Dashboard update could "
                        + "not be created, this is likely caused by your MySQL version being "
                        + "before 5.1, please update your MySQL Community Server to version 5.1 or greater.");
            }
            
//            msg += connector.changeNobodyToMyLab();
            this.txtMessage.append(msg);
            
        } catch (JCMSException sqle) {
            throw new JCMSException(logIt.logMessage(Severity.ERROR, "\nJCMS Web "+ this.getInstallationType() +":  JCMS database "+ this.getInstallationType().toLowerCase() +" failed! \nDatabase restored to its original state."
                    + "\nException detail: \n"+ sqle.getMessage() ));
        } catch (Exception e) {
            throw new JCMSException(logIt.logMessage(Severity.ERROR, "\nJCMS Web "+ this.getInstallationType() +":  JCMS database "+ this.getInstallationType().toLowerCase() +" failed! \nDatabase restored to its original state."
                    + "\nException detail: \n"+ e.getMessage() ));
        }
        
    }
    
    private String getInstallationType() {
        if (this.getIsNewInstallation()) 
            return "Install";
        else
            return "Upgrade";
    }
    
    private void backupDatabases(String installDirectory) throws JCMSException {
        String obsoleteJCMSWebDBName = ((JCMSWebInstallerApp)this.getFrame()).getArg1ObsoleteJCMSWebDbName();
        String msg = "";
        connector.clearDatabaseBackups();     
        
        try {
            // Backup jcms database
            connector.backupJCMSDatabase(installDirectory);
            // Backup jcmsweb_db database.  Retiring it after this upgrade.
            // Future upgrades will simply not find it because it has already been integrated with jcms db
            connector.backupDatabase(obsoleteJCMSWebDBName, installDirectory); 
        } catch (Exception e) {
            msg = connector.rollbackDatabases();
            throw new JCMSException(logIt.logMessage(Severity.ERROR, "\nFailed to backup JCMS Web database, "+ obsoleteJCMSWebDBName + " ! \nDatabase being restored to its original state."
                    + "\nException detail: "+ msg +"\n"+ e.getMessage() ));
        }

    }
    
//    /**
//     * Updates JCMS Access schema with JCMS Web entites, copies JCMS Web data over and drops JCMS Web database.
//     * Condition:  Migrate the database when jcms_db release number is v5.1.0
//     * On success:  drops jcmsweb_db
//     * On failure:  throws exception
//     *              TODO:  Drop n restore jcmsweb_db if backup found to accommodate JCMS Upgrade
//     * @throws Exception 
//     */
//    private void migrateJCMSWebDatabase() throws JCMSException {
//        try {
//            
//            String s = connector.getJCMSVersion().replaceAll("\\.", "");
//            if (Integer.parseInt(s) == 510)
//            {
//                // Migrate entities and data
//                // Then drop JCMS Web database
//                // Migration complete
//                System.out.println("MIGRATE DATA");
//                
//            }
//        } catch (SQLException sqle) {
//            throw new JCMSException(logIt.logMessage(Severity.ERROR, "JCMS Web migration task failed. \n" + sqle.getMessage()));
//        }
//    }
    
    /**
     * @return the newInstallation
     */
    public Boolean getIsNewInstallation() {
        return ((JCMSWebInstallerApp)this.getFrame()).getIsNewInstallation();
    }
    
    public InputDTO getInputDTO() {
        return connector.getInputDTO();
    }
}
